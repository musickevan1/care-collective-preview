// Care Collective Service Worker
// Provides offline functionality for help requests and core features

// Use timestamp-based cache versioning to ensure fresh content on deployments
// Auto-generated by scripts/update-sw-version.js during prebuild
const CACHE_VERSION = '2025-11-02-764'
const CACHE_NAME = `care-collective-v${CACHE_VERSION}`
const OFFLINE_CACHE = `care-collective-offline-v${CACHE_VERSION}`

// Static asset file extensions for cache-first strategy
// These files have content hashes, so cache-first is safe
const STATIC_ASSET_EXTENSIONS = /\.(js|css|woff2?|ttf|eot|otf|png|jpg|jpeg|gif|svg|ico|webp|avif|wasm|json|xml|txt)$/i
const STATIC_ASSET_PATHS = [
  '/_next/static/',
  '/_next/image',
  '/fonts/',
  '/images/',
  '/icons/'
]

// Network timeout for slow connections (rural Missouri users)
const NETWORK_TIMEOUT_MS = 2000

// Core files to cache for offline access
const CORE_ASSETS = [
  '/',
  '/dashboard',
  '/requests',
  '/logo.png',
  '/manifest.json'
]

// Help request pages that should be available offline
const HELP_REQUEST_PATTERN = /^\/requests\/[^/]+$/

// Install event - cache core assets
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...')

  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Caching core assets')
        return cache.addAll(CORE_ASSETS)
      })
      .then(() => {
        // Skip waiting to activate immediately
        return self.skipWaiting()
      })
      .catch((error) => {
        console.error('Cache installation failed:', error)
      })
  )
})

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating service worker version:', CACHE_VERSION)

  event.waitUntil(
    Promise.all([
      // Clean up old caches
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames
            .filter((cacheName) => {
              // Keep only current version caches
              const isCareCacheCollection = cacheName.startsWith('care-collective-')
              const isCurrentVersion = cacheName === CACHE_NAME || cacheName === OFFLINE_CACHE
              return isCareCacheCollection && !isCurrentVersion
            })
            .map((cacheName) => {
              console.log('[SW] Deleting old cache:', cacheName)
              return caches.delete(cacheName)
            })
        )
      }),
      // Take control of all clients immediately
      self.clients.claim()
    ]).then(() => {
      console.log('[SW] Service worker activated and controlling all clients')
    })
  )
})

// Fetch event - implement caching strategy
self.addEventListener('fetch', (event) => {
  const { request } = event
  const url = new URL(request.url)

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return
  }

  // Skip external requests
  if (url.origin !== location.origin) {
    return
  }

  // Special handling for API requests
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleApiRequest(request))
    return
  }

  // Special handling for help request pages
  if (HELP_REQUEST_PATTERN.test(url.pathname)) {
    event.respondWith(handleHelpRequestPage(request))
    return
  }

  // NETWORK-FIRST strategy for HTML/navigation requests
  // This ensures users always see the latest deployment
  if (request.mode === 'navigate' || request.headers.get('accept')?.includes('text/html')) {
    event.respondWith(handleNavigationRequest(request))
    return
  }

  // Cache-first for static assets (JS, CSS, images, fonts)
  // These have content hashes in filenames, so cache-first is safe
  const isStaticAsset = STATIC_ASSET_PATHS.some(path => url.pathname.startsWith(path)) ||
                        STATIC_ASSET_EXTENSIONS.test(url.pathname)

  if (isStaticAsset) {
    event.respondWith(handleStaticAsset(request))
    return
  }

  // Default: network-first with cache fallback
  event.respondWith(
    fetch(request)
      .then((networkResponse) => {
        // Cache successful responses
        if (networkResponse.ok) {
          const responseClone = networkResponse.clone()
          caches.open(CACHE_NAME)
            .then((cache) => cache.put(request, responseClone))
            .catch(console.warn)
        }
        return networkResponse
      })
      .catch(() => {
        // Network failed, try cache
        return caches.match(request).then((cachedResponse) => {
          if (cachedResponse) {
            return cachedResponse
          }
          // No cache available
          return new Response('Offline - Please check your connection', {
            status: 503,
            statusText: 'Service Unavailable'
          })
        })
      })
  )
})

/**
 * Fetch with timeout - critical for rural/slow connections
 * Falls back to cache if network takes too long
 * @param {Request} request - The request to fetch
 * @param {number} timeout - Timeout in milliseconds (default: 2000)
 * @returns {Promise<Response>}
 */
async function fetchWithTimeout(request, timeout = NETWORK_TIMEOUT_MS) {
  const controller = new AbortController()
  const timeoutId = setTimeout(() => controller.abort(), timeout)

  try {
    const response = await fetch(request, { signal: controller.signal })
    clearTimeout(timeoutId)
    return response
  } catch (error) {
    clearTimeout(timeoutId)
    if (error.name === 'AbortError') {
      console.warn('[SW] Network request timed out after', timeout, 'ms')
      throw new Error('Network timeout')
    }
    throw error
  }
}

// Handle API requests with network-first strategy
async function handleApiRequest(request) {
  try {
    // Try network first for API requests
    const networkResponse = await fetch(request)

    // Cache successful responses
    if (networkResponse.ok) {
      const cache = await caches.open(OFFLINE_CACHE)
      cache.put(request, networkResponse.clone())
    }

    return networkResponse
  } catch (error) {
    // Network failed, try cache
    const cachedResponse = await caches.match(request)
    if (cachedResponse) {
      return cachedResponse
    }

    // Return error response
    return new Response(JSON.stringify({
      error: 'Offline - Request failed',
      offline: true
    }), {
      status: 503,
      headers: { 'Content-Type': 'application/json' }
    })
  }
}

/**
 * Handle navigation requests with network-first strategy
 * CRITICAL: Includes timeout for slow connections (rural Missouri users)
 * This ensures users always see the latest deployment
 */
async function handleNavigationRequest(request) {
  try {
    // Try network first with timeout
    const networkResponse = await fetchWithTimeout(request)

    if (networkResponse.ok) {
      // Cache the response for offline access
      const cache = await caches.open(CACHE_NAME)
      cache.put(request, networkResponse.clone())
    }

    return networkResponse
  } catch (error) {
    console.log('[SW] Network failed/timed out, trying cache:', error.message)

    // Network failed or timed out, try cache
    const cachedResponse = await caches.match(request)
    if (cachedResponse) {
      console.log('[SW] Serving from cache due to network issues')
      return cachedResponse
    }

    // No cache, serve fallback
    return caches.match('/') || new Response('Offline - Please check your connection', {
      status: 503,
      statusText: 'Service Unavailable',
      headers: { 'Content-Type': 'text/plain' }
    })
  }
}

/**
 * Handle help request pages with stale-while-revalidate
 * Serves cached version immediately while updating in background
 * CRITICAL: Best of both worlds - fast loading for crisis situations + fresh content
 */
async function handleHelpRequestPage(request) {
  const cache = await caches.open(CACHE_NAME)
  const cachedResponse = await cache.match(request)

  // Fetch fresh version in background
  const fetchPromise = fetchWithTimeout(request)
    .then((response) => {
      if (response.ok) {
        console.log('[SW] Updating help request page in cache')
        cache.put(request, response.clone())
      }
      return response
    })
    .catch((error) => {
      console.warn('[SW] Background fetch failed:', error.message)
      return null
    })

  // If we have cached version, return it immediately
  // Next visit will have the updated version
  if (cachedResponse) {
    console.log('[SW] Serving help request from cache, updating in background')
    return cachedResponse
  }

  // No cache, wait for network
  console.log('[SW] No cache for help request, waiting for network')
  const networkResponse = await fetchPromise
  return networkResponse || new Response('Unable to load help request', {
    status: 503,
    statusText: 'Service Unavailable',
    headers: { 'Content-Type': 'text/plain' }
  })
}

// Handle static assets with cache-first (these have content hashes)
async function handleStaticAsset(request) {
  try {
    // Check cache first for static assets
    const cachedResponse = await caches.match(request)
    if (cachedResponse) {
      return cachedResponse
    }

    // Fetch from network and cache
    const networkResponse = await fetch(request)

    if (networkResponse.ok) {
      const cache = await caches.open(CACHE_NAME)
      cache.put(request, networkResponse.clone())
    }

    return networkResponse
  } catch (error) {
    // Try cache as final fallback
    const cachedResponse = await caches.match(request)
    if (cachedResponse) {
      return cachedResponse
    }
    throw error
  }
}

// Handle messages from main thread
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Background sync for when connection is restored
self.addEventListener('sync', (event) => {
  if (event.tag === 'help-request-sync') {
    event.waitUntil(syncHelpRequests())
  }
})

// Sync help requests when back online
async function syncHelpRequests() {
  try {
    // This would sync any pending help requests created while offline
    console.log('Syncing help requests...')
    // Implementation would depend on offline storage strategy
  } catch (error) {
    console.error('Help request sync failed:', error)
  }
}

console.log('Care Collective Service Worker loaded')